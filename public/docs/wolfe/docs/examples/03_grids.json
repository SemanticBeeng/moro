{
  "name" : "Ising Grids",
  "cells" : [ {
    "id" : 0,
    "compiler" : "heading3",
    "input" : {
      "code" : "Data Structures",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 1,
    "compiler" : "wolfe",
    "input" : {
      "code" : "import ml.wolfe.macros.Library._\nval N = 3\nval variance = 1.0\nval noise = 0.5\nval rand = new util.Random(0)\n\ncase class Pixel(x: Boolean, y: Boolean)\ncase class Image(data: Seq[Seq[Pixel]]) {\n    def cells = data.flatten\n    def matrix(extr: Pixel => Double = (p: Pixel) => { if(p.y) 1.0 else 0.0 }) = \n        Matrix[Pixel](data)(extr)\n    def idxs = (0 until data.length).map(i => (0 until data(i).length).map(i -> _)).flatten\n}\n\nval data = (0 until N).map(i =>\n    (0 until N).map(j => {\n        val y = ((i + j)/2) % 3 == 0\n        val x = if(noise > rand.nextDouble) !y else y\n        //(if(y) 1.0 else -1.0) + variance*rand.nextGaussian()\n        Pixel(x, y)\n    }))\nval img = new Image(data)\nimg.matrix()",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 2,
    "compiler" : "wolfe",
    "input" : {
      "code" : "Map(\"Observed\" -> img.matrix(p => if(p.x) 1.0 else 0.0),\n    \"True\" -> img.matrix())",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 3,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def obs(i: Image) = \n  i.copy(data = i.data.map(_.map(_.copy(y = hidden))))\n\ndef b2d(b: Boolean, f: Double = 1.0) = if(b) f else -f\ndef unary(img: Image) = sum(img.cells) {p=> b2d(p.y == p.x)}\ndef edges(img: Image) = {\n   sum(0 until N-1) { i =>\n     sum(0 until N-1) { j => {\n         1.0*b2d(img.data(i)(j).y == img.data(i+1)(j).y) +\n         1.0*b2d(img.data(i)(j).y == img.data(i)(j+1).y)\n       }}}}\ndef model(img: Image) = unary(img) + edges(img)\n\ndef images = all(Image)(seqs(seqs(all(Pixel), N), N))\n//def inference(img: Image) = argmax(images st evidence(obs)(img)){model}\nval filtered = images st evidence(obs)(img)\nfiltered.size //map(i => i.matrix() -> model(i))",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 4,
    "compiler" : "wolfe",
    "input" : {
      "code" : "def brute(img: Image) = ml.wolfe.BruteForceOperators.argmax(images st evidence(obs)(img)){model}\nbrute(img).matrix()",
      "outputFormat" : "html",
      "extraFields" : null
    }
  } ]
}
