{
  "name" : "Moro Overview",
  "cells" : [ {
    "id" : 0,
    "compiler" : "section",
    "input" : {
      "code" : "headings",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 1,
    "compiler" : "heading1",
    "input" : {
      "code" : "Heading",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 2,
    "compiler" : "heading2",
    "input" : {
      "code" : "Heading",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 3,
    "compiler" : "heading3",
    "input" : {
      "code" : "Heading",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 4,
    "compiler" : "heading4",
    "input" : {
      "code" : "Heading",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 5,
    "compiler" : "heading5",
    "input" : {
      "code" : "Heading",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 6,
    "compiler" : "section",
    "input" : {
      "code" : "markdown",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 7,
    "compiler" : "markdown",
    "input" : {
      "code" : "### Markdown!\n\nThis notebook can support all markdown features, such as **bold**, _italics_, [links](http://sameersingh.org/), `code`, etc.\n\nAnd the equations can be inlined if definining \\\\(\\theta\\\\) and \\\\(\\pi\\\\) in text.",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 8,
    "compiler" : "section",
    "input" : {
      "code" : "latex",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 9,
    "compiler" : "heading3",
    "input" : {
      "code" : "Latex",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 10,
    "compiler" : "latex",
    "input" : {
      "code" : "\\alpha+\\beta=\\sum_{i=0}^{n}\\gamma\\cfrac{1}{\\mathcal{Z}}",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 11,
    "compiler" : "section",
    "input" : {
      "code" : "images",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 12,
    "compiler" : "heading3",
    "input" : {
      "code" : "Images",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 13,
    "compiler" : "imageurl",
    "input" : {
      "code" : "http://1.bp.blogspot.com/-1Ub3QovBjkM/UUYRy5t-53I/AAAAAAAACr4/PUpU70GJaJ0/s1600/Princess+mononoke+photos1.jpg",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 14,
    "compiler" : "section",
    "input" : {
      "code" : "scala",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 15,
    "compiler" : "heading3",
    "input" : {
      "code" : "Interactive Scala!",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 32,
    "compiler" : "markdown",
    "input" : {
      "code" : "Moro supports the Scala REPL: write, compile, and run!",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 16,
    "compiler" : "scala",
    "input" : {
      "code" : "def f(x:Int) = x * x\nf(10)",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 17,
    "compiler" : "section",
    "input" : {
      "code" : "scala2",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 18,
    "compiler" : "scala",
    "input" : {
      "code" : "def f2(x:Int) = x + x\nMap(10 -> \"ten\", 100 -> \"hundred\")",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 19,
    "compiler" : "section",
    "input" : {
      "code" : "matrix",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 20,
    "compiler" : "heading2",
    "input" : {
      "code" : "Matrices as Images",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 21,
    "compiler" : "scala",
    "input" : {
      "code" : "// Matrices!\nval random = new util.Random()\nMatrix((0 until 10).map(i => (0 until 10).map(j => (i+j)+2*random.nextDouble())))",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 22,
    "compiler" : "section",
    "input" : {
      "code" : "plots",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 23,
    "compiler" : "heading2",
    "input" : {
      "code" : "Plots too!",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 24,
    "compiler" : "scala",
    "input" : {
      "code" : "val x = (0.0 to 6.28 by 0.25)\nplot(x -> (math.sin(_), math.cos(_)))",
      "outputFormat" : "string",
      "extraFields" : null
    }
  }, {
    "id" : 25,
    "compiler" : "section",
    "input" : {
      "code" : "others",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 26,
    "compiler" : "markdown",
    "input" : {
      "code" : "### Or pretty much any file format*\n\nThose supported by [Google Drive viewer](https://support.google.com/drive/answer/2423485?hl=en&p=docs_viewer&rd=1), i.e.\n\n* Image files (.JPEG, .PNG, .GIF, .TIFF, .BMP) <!-- .element: class=\"fragment\" -->\n* Video files (WebM, .MPEG4, .3GPP, .MOV, .AVI, .MPEGPS, .WMV, .FLV, .ogg)  <!-- .element: class=\"fragment\" -->\n* Text files (.TXT)  <!-- .element: class=\"fragment\" -->\n* Markup/Code (.CSS, .HTML, .PHP, .C, .CPP, .H, .HPP, .JS)  <!-- .element: class=\"fragment\" -->\n* Microsoft Word (.DOC and .DOCX)  <!-- .element: class=\"fragment\" -->\n* Microsoft Excel (.XLS and .XLSX)  <!-- .element: class=\"fragment\" -->\n* Microsoft PowerPoint (.PPT and .PPTX)  <!-- .element: class=\"fragment\" -->\n* Adobe Portable Document Format (.PDF)  <!-- .element: class=\"fragment\" -->\n* Apple Pages (.PAGES)\n* Adobe Illustrator (.AI)\n* Adobe Photoshop (.PSD)\n* Tagged Image File Format (.TIFF)\n* Autodesk AutoCad (.DXF)\n* Scalable Vector Graphics (.SVG)\n* PostScript (.EPS, .PS)\n* TrueType (.TTF)\n* XML Paper Specification (.XPS)\n* Archive file types (.ZIP, .RAR, tar, gzip)\n* Audio formats (MP3, MPEG, WAV, .ogg)\n* .MTS files\n* Raw Image formats",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 27,
    "compiler" : "section",
    "input" : {
      "code" : "pdfs",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 28,
    "compiler" : "heading4",
    "input" : {
      "code" : "e.g. PDFs",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 29,
    "compiler" : "google_viewer",
    "input" : {
      "code" : "http://www.riedelcastro.org//publications/papers/riedel13relation.pdf",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 30,
    "compiler" : "section",
    "input" : {
      "code" : "thanks",
      "outputFormat" : "html",
      "extraFields" : null
    }
  }, {
    "id" : 31,
    "compiler" : "heading1",
    "input" : {
      "code" : "Thanks!",
      "outputFormat" : "html",
      "extraFields" : null
    }
  } ]
}
