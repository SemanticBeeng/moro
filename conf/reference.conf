# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="AY]x:8G0^Z:C__uWd/Vv1Dn5/fdYuEaWFtD53vi9vWnxN<Mink4Xace^pVkB?nKv"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Moro Configuration
moro {
    # Root folder where all the notebooks are stored (include trailing /)
    docRoot = "public/docs/"

    compilers {
        scala {
            maxCacheSize = 25
            imports = [ "math._",
                  "org.sameersingh.htmlgen.D3jsConverter.Implicits._",
                  "org.sameersingh.scalaplot.Implicits._",
                  "org.sameersingh.htmlgen.Custom._"  ]
            classPath = []
            classesForJarPath = [
                  "org.sameersingh.htmlgen.Converter",
                  "org.sameersingh.scalaplot.Implicits" ]
            aggregate: true
        }
        wolfe {
            imports = [
                  "org.sameersingh.htmlgen.D3jsConverter.Implicits._",
                  "org.sameersingh.scalaplot.Implicits._",
                  "org.sameersingh.htmlgen.Custom._",
                  "ml.wolfe._",
                  "ml.wolfe.Wolfe._",
                  "ml.wolfe.macros.OptimizedOperators._",
                  "ml.wolfe.D3Implicits._",
                  "ml.wolfe.util.Multidimensional._",
                  "ml.wolfe.nlp._",
                  "ml.wolfe.ui._"]
            classPath = []
            classesForJarPath = [
                  "breeze.linalg.DenseVector",
                  "breeze.macros.expand",
                  "org.slf4j.Logger",
                  "com.typesafe.scalalogging.slf4j.Logger",
                  "scala.reflect.macros.Aliases",
                  "ml.wolfe.util.Evaluator",
                  "ml.wolfe.util.Multidimensional",
                  "ml.wolfe.nlp.Token",
                  "ml.wolfe.examples.SkipChainUtil"
                  "ml.wolfe.ui.BratRenderer",
                  "ml.wolfe.macros.Library",
                  "cc.factorie.model.Model",
                  "org.sameersingh.htmlgen.Converter",
                  "org.sameersingh.scalaplot.Implicits" ]
            aggregate: true
        }
    }

    views {
      static {
      }
      present {
      }
      editor {
        enabled = true
        staticView = "static"
        // hide the editors automatically after compiling a cell (unless forced visible by the compiler)
        hideAfterCompile = true
      }
    }
}

include "securesocial.conf"